---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Layout from "../layouts/main.layout.astro";
import HowTo from "../components/how-to.astro";

const jobs = (await getCollection("jobs")).sort(
  (a, b) =>
    new Date(b.data.postedAt).getTime() - new Date(a.data.postedAt).getTime()
);

type Job = CollectionEntry<"jobs">;
---

<Layout title="WeJob - Job Offers">
  <main class="container mx-auto mt-8 px-4">
    <HowTo />
    <section class="border border-gray-200 rounded-lg shadow-sm p-6">
      <div
        class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6"
      >
        <h2 class="text-2xl font-semibold text-gray-800">
          Current Openings ({jobs.length})
        </h2>
        <div class="relative w-full sm:w-auto">
          <input
            type="text"
            id="jobSearch"
            placeholder="Search jobs by title, skills, or location..."
            class="w-full sm:w-80 px-4 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
          />
          <svg
            class="absolute right-3 top-2.5 h-5 w-5 text-gray-400"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
      </div>

      <div id="jobsContainer" class="grid grid-cols-1 md:grid-cols-3 gap-4">
        {
          jobs.map((job: Job) => (
            <div
              class="job-card border border-gray-200 rounded p-4"
              data-title={job.data.title?.toLowerCase()}
              data-description={job.data.description?.toLowerCase()}
              data-skills={job.data.requirements?.join(",").toLowerCase()}
              data-location={job.data.location?.toLowerCase()}
            >
              <a
                href={`/jobs/${job.id}`}
                class="text-xl font-semibold text-gray-800 hover:text-blue-600"
              >
                {job.data.title}
              </a>
              <div class="mt-2">
                <span class="text-gray-600">{job.data.location}</span>
                {job.data.requirements && (
                  <div class="mt-2 flex flex-wrap gap-1">
                    {job.data.requirements.slice(0, 3).map((skill: string) => (
                      <span class="text-xs bg-gray-100 rounded px-2 py-1">
                        {skill}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))
        }
      </div>
    </section>
  </main>

  <script>
    // Client-side search functionality
    let searchTimeout: any;
    const jobCards = document.querySelectorAll(".job-card");

    function handleSearch(event: Event) {
      const searchTerm = (event.target as HTMLInputElement).value.toLowerCase();

      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        jobCards.forEach((card) => {
          const title = (card as HTMLElement).dataset.title || "";
          const description = (card as HTMLElement).dataset.description || "";
          const skills = (card as HTMLElement).dataset.skills || "";
          const location = (card as HTMLElement).dataset.location || "";

          const matches =
            title.includes(searchTerm) ||
            description.includes(searchTerm) ||
            skills.includes(searchTerm) ||
            location.includes(searchTerm);

          card.classList.toggle("hidden", !matches);
        });
      }, 300);
    }

    // Add event listener to search input
    document.addEventListener("astro:page-load", () => {
      const searchInput = document.querySelector(
        "#jobSearch"
      ) as HTMLInputElement;
      if (searchInput) {
        searchInput.addEventListener("input", handleSearch);
      }
    });
  </script>
</Layout>
